<!-- snippets/product__add.liquid -->
{% comment %} 
Add to cart block for product sections. Includes quantity selector, variant picker, subscription options and addtional content. 

Accepts:
- blocksettings: liquid object of block settings
- featured: boolean to assign product object from section settings, set this to true if block is used within a section rather than product template

Usage:
{% render 'product__add', 
blocksettings: block.settings, 
featured: true %}

Globals:
- settings.product_variant_selection: set variants style to dropdown or buttons
- settings.product_color_selection: set color option picker style to dropdown, buttons or swatches
- settings.type_seperator: setting to pick the type of seperator between text

Possible enhancements:
- Include nesting container within snippet.
{% endcomment %}{% if featured %}
{%- assign product = section.settings.product -%} 
{% endif %}

{%- liquid
  assign gift_card_recipient_feature_active = false
  if blocksettings.enable_gift_card_recipient and product.gift_card?
    assign gift_card_recipient_feature_active = true
  endif

  if section.settings.enable_alternative_options
    assign alt_options_enabled = true
  else 
    assign alt_options_enabled = false
  endif
-%}

{%- comment -%}add{%- endcomment -%}
<div id="product-form-container" add-to-cart-max-two-product="{% if product.metafields.custom.add_to_cart_max_two_product %}{{ product.metafields.custom.add_to_cart_max_two_product }}{% else %}false{% endif %}" class="px-4"> {% if blocksettings.enable_quantity %}
    <div class="mb-4">
      <label
        class="type--smaller flex mb-1 opacity-75"
        for="{{ product.id }}-quantity">
    {{ 'products.general.quantity' | t }} {% comment %}  {% if product.metafields.custom.add_to_cart_max_two_product %} - max 2 products only. {% endif %} {% endcomment %}
      </label>
      
      {% comment %} {% if product.metafields.custom.add_to_cart_max_two_product %}
        {% assign quantity_increase = 'quantity < max && quantity++;' %}
        {% assign quantity_decrease = 'quantity > min && quantity--;' %}
      {% else %}{% endif %} {% endcomment %}
      {% assign quantity_increase = 'quantity++;' %}
      {% assign quantity_decrease = 'quantity--;' %}
      

      <input type="hidden" id="cart-quantity-container" x-ref="cart_quantity_container" value="">
      {% comment %} <input type="hidden" id="add-to-cart-max-two-product" x-ref="add_to_cart_max_two_product" value="{% if product.metafields.custom.add_to_cart_max_two_product %}{{ product.metafields.custom.add_to_cart_max_two_product }}{% else %}false{% endif %}"> {% endcomment %}
      
      <div x-data="fetchCartItems()">
        {% comment %} <p x-text="cartQuantity"></p>
        <p x-text="maxTwoProducts"></p>
        <p>{{ product.id }}</p>
        <p x-text="productId"></p> {% endcomment %}
        <input type="hidden" value="" x-model="cartQuantity">
        {% comment %} <input type="hidden"  value="" x-model="maxTwoProducts">  {% endcomment %}
        <input type="hidden" id="quantity-max-onload" value="" x-model="max">
      </div>
      
      <div id="input-field-quantity" class="color__text color__border-divider-2 color__bg-overlay-1 border--width hover:color__border-selected-1 border__input--radius relative flex w-[150px] overflow-hidden" 
        x-data="{ 
          button_loading: false,
          quantity: 1, 
          allowTyping: false,
          disabled: false,
          min: 1,
          max: 2
        }" x-on:update-quantity-field.window="quantity = $event.detail.newQuantity"
         x-on:disable-pdp-quantity-btn.window="disabled = true" 
         x-on:enable-pdp-quantity-btn.window="disabled = false" 
         x-on:update-max.window="max = 2">
        <button
          id="pdp-btn-decrease"
          class="btn btn--smaller btn--plain shrink-0 !rounded-none"
          title="{{ 'cart.general.decrease' | t }}"
          :disabled="button_loading"
          @click="
                                    {{ quantity_decrease }}
                                    handleForm(); 
                                    button_loading = true; 
                                    setTimeout(function(){ button_loading = false}, 500);">
          {% render 'component__icon', icon: 'minus', size: '14', class: '' %}
        </button>
        {% comment %} {% if product.metafields.custom.add_to_cart_max_two_product %}
        x-data="fetchCartItems()"
        :disabled="disabled || button_loading"
        {% else %}
        :disabled="button_loading"
        {% endif %} {% endcomment %}
        {% comment %} :disabled="disabled || button_loading || cartQuantity >= 2 && maxTwoProducts == 'true' && productId == {{ product.id }} " {% endcomment %}
        <input
          id="{{ product.id }}-quantity"
          class="quantity-{{product.id}} form-input !border-0 text-center !rounded-none"
          type="text"
          name="quantity"
          value="1"
          placeholder="1"
          min="1"
          {% if product.metafields.custom.add_to_cart_max_two_product %}
          x-bind:readonly="!allowTyping"
          @keydown="if (!allowTyping) { $event.preventDefault(); }"
          {%  endif %}
          x-model='quantity'
          @change.debounce="
                                    button_loading = true; 
                                    handleForm();
                                    setTimeout(function(){ button_loading = false}, 500);">
        <div class="btn__spinner btn--smaller !w-auto" :class="{ '!visible color__bg-overlay-1 z-10' : button_loading }">
          {% render 'component__icon', icon: 'spinner', size: '24', class: '' %}
        </div>
        <button
          id="pdp-btn-increase"
          class="btn btn--smaller btn--plain shrink-0 !rounded-none"
          title="{{ 'cart.general.increase' | t }}"
          :disabled="button_loading"
          @click="
                                    {{ quantity_increase }}
                                    handleForm();
                                    button_loading = true; 
                                    setTimeout(function(){ button_loading = false}, 500);">
          {% render 'component__icon', icon: 'plus', size: '14', class: '' %}
        </button>
        {% comment %} {% if product.metafields.custom.add_to_cart_max_two_product %}
        x-data="fetchCartItems()"
        :disabled="disabled || button_loading"
        {% else %}
        :disabled="button_loading"
        {% endif %} {% endcomment %}
        {% comment %} :disabled="disabled || button_loading || cartQuantity >= 2 && maxTwoProducts == 'true' && productId == {{ product.id }}" {% endcomment %}
      </div>
    </div>
  {% endif %}

  {% unless blocksettings.enable_quantity %}
    <input
      class="hidden"
      type="number"
      name="quantity"
      placeholder="1"
      min="1"
      value="1"
      x-model='quantity'
      hidden>
  {% endunless %}

  {%- if gift_card_recipient_feature_active -%}
    {%- render 'product__gift-card-recipient-form' -%}
  {%- endif -%}

  <div class="flex-grow">
    <button
      class="btn btn--load !w-full btn--plain type__heading"
      :class="{ 'btn--loading' : cart_loading && button_loading }"
      type="button"
      role="button"
      disabled
      :disabled="button_loading"
      @click="choosing = true"
      x-show="buttonDisabled && defaultAvailable && {{ alt_options_enabled }} != true "
      x-cloak>
      <div class="btn__content">
        {{ 'products.general.choose_options' | t }}
      </div>
    </button>
    {% if blocksettings.enable_notify_me %}
      <div x-show="!defaultAvailable && defaultVariantExists" class="mb-2">
        <!-- <button
          class="btn !w-full"
          type="button"
          @click="back_in_stock_popup = true">
          {{ "back_in_stock.notify" | t }}
        </button> -->
        
      {% render 'klaviyo-back-in-stock-btn', product: product %}
        
      </div>
    {% endif %}
    <button
      class="btn btn--load !w-full btn--plain type__heading"
      :class="{ 'btn--loading' : cart_loading && button_loading }"
      type="button"
      role="button"
      disabled
      :disabled="button_loading"
      x-show="!defaultAvailable && defaultVariantExists"
      x-cloak>
      <div class="btn__content">
        {{ 'products.general.sold_out' | t }}
      </div>
    </button>
    <button
      class="btn btn--load !w-full btn--plain type__heading"
      :class="{ 'btn--loading' : cart_loading && button_loading }"
      type="button"
      role="button"
      disabled
      :disabled="button_loading"
      x-show="!defaultVariantExists && allOptionsSelected"
      x-cloak>
      <div class="btn__content">
        {{ 'products.general.unavailable' | t }}
      </div>
    </button>
    <button
      id="add-to-cart-button"
      class="btn btn--load !w-full"
      type="submit"
      role="button"
      :class="{ 'btn--loading' : cart_loading && button_loading }"
      {% if product.metafields.custom.add_to_cart_max_two_product %}
      x-data="fetchCartItems()"
      :disabled="button_loading || incomplete_fields"
      @click="setTimeout(() => { $dispatch('update-quantity-field', { newQuantity: 1 }) }, 700), $dispatch('disable-pdp-quantity-btn')"
      {% else %}
      :disabled="button_loading || incomplete_fields"
      {%  endif %}
      {% if alt_options_enabled %}
      x-show="true"
      {% else %}
      x-show="!buttonDisabled && defaultVariantExists && defaultAvailable"
      {% endif %}>
      <div class="btn__content">
        {% if product.metafields.custom.button_text %}
          {{ product.metafields.custom.button_text }}
          {% if settings.type_seperator == 'dot' and settings.show_product_button_prices %}Â·{% elsif settings.type_seperator == 'line' and settings.show_product_button_prices %}|{% endif %}
        {% else %}
        {% render 'component__icon', 
          icon: 'cart', 
          size: '20', 
          class: 'mr-[10px]' %}
          {{ 'products.general.add_to_cart' | t }}
          {% if settings.type_seperator == 'dot' and settings.show_product_button_prices %}Â·{% elsif settings.type_seperator == 'line' and settings.show_product_button_prices %}|{% endif %}
        {% endif %}
        {% if settings.show_product_button_prices %}
          <span
            class="ml-1"
            {% if product.metafields.custom.product_bundle.value == null %}
            x-text="Shopify.formatMoney(calculatedPrice, currency_symbol, {{ settings.enable_currency }}, '{{ settings.price_format }}', '{{ settings.currency_subunit_value }}')"
            {% else %}
            x-text="Shopify.formatMoney(bundlePrice, currency_symbol, {{ settings.enable_currency }}, '{{ settings.price_format }}', '{{ settings.currency_subunit_value }}')"
            {% endif %}
            x-show="calculatedPrice > 0"
            x-cloak>
            {{ product.price | money }}
          </span>
        {% endif %}
      </div>
      <div class="btn__spinner btn--smaller !w-auto" :class="{ '!visible color__bg-overlay-1 z-10' : button_loading }">
        {% render 'component__icon', icon: 'spinner', size: '24', class: '' %}
      </div>
    </button>
    {% comment %} :disabled="button_loading || incomplete_fields || cartQuantity >= 2 && maxTwoProducts == 'true' && productId == {{ product.id }} || $refs.cart_quantity_container.value >= '2' && $refs.add_to_cart_max_two_product.value == 'true' " {% endcomment %}
  </div>
</div>

<script>

  function fetchCartItems() {
    return {
      cartQuantity: '0',
      //maxTwoProducts: '{{ product.metafields.custom.add_to_cart_max_two_product }}',
      productId: '',
      min: 1,
      max: 2,
      // Initialize the component and fetch data
      init() {
        this.fetchData();
      },
      fetchData() {
        const apiEndpoint = '/cart.js';
        fetch(apiEndpoint)
          .then(response => response.json())
          .then(data => {
            //console.log(data.items)
            data.items.forEach((item) => {

              //console.log(item.properties._add_to_cart_max_two_product)
              
              // if(item.properties._add_to_cart_max_two_product == 'true' && item.quantity >= 2 && item.product_id == {{ product.id }}){
              //   //this.maxTwoProducts = item.properties._add_to_cart_max_two_product;
              //   this.productId = item.product_id;
              //   this.cartQuantity = item.quantity;
              // }

              // if(item.properties._add_to_cart_max_two_product == 'true' && item.product_id == {{ product.id }} ){
              //   this.min = 1;
              //   this.max = item.quantity;
              //   //this.maxTwoProducts = item.properties._add_to_cart_max_two_product;
              // }else {
              //   //this.maxTwoProducts = 'false'
              // }

            })
          
          })
          .catch(error => {
            console.error('Error fetching data:', error);
            this.cartQuantity = 'Failed to load quantity.';
            this.maxTwoProducts = 'Failed to load max product props.';
          });
      }
    }
  }

</script>
